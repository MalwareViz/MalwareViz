#!/usr/bin/env python
# coding: utf8
"""
Download a webpage -> parse Name, IP, URL, Dropped Files.
Create Graphviz gv file -> convert to svg -> post to web.


                               ------------            ------------
                              |     URL     | ---->    | IP        |
                            /  ------------            ------------
                           /
 ------------   -----------
|malware.exe |-| VirusTotal |
 ------------   -----------
                           \
                            \ ----------------
                             |droppedFiles.exe |
                              ----------------
Samples:
https://malwr.com/analysis/OGNjMDBhMDg0YjAzNGQzYTkyZGZlZDhlNDc2NmMyNzY/
https://malwr.com/analysis/YzZiNmMzZGQ0NGNlNDM1ZWJlMmMxZGEyOTY1NWRkODU/

"""
'''
MIT License.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
'''
__author__ = 'Craig Field'
__license__ = 'MIT '
__version__ = '0.1'
__email__ = 'admin@malwareviz.com'


import re, subprocess, tempfile, sys, os, urllib, urllib2, webbrowser
#3rd Party
try:
    import requests, simplejson
    from BeautifulSoup import BeautifulSoup
except:
    print "Check 3rd party libraries are installed. \n\tpip install requests\n\tsudo pip install simplejson\n\tpip install graphviz\n\tsudo pip install BeautifulSoup\n"

varURL   = raw_input("What malwr.com url would you like to visualize?: \nhttps://malwr.com/analysis/OGNjMDBhMDg0YjAzNGQzYTkyZGZlZDhlNDc2NmMyNzY/\n")
VT_KEY   = raw_input("Enter free VirusTotal API key: [ENTER = skip]\n")
dot_file = raw_input('Enter path of dot.exe (www.graphviz.org)\n [ENTER = Default] "C:\\Program Files (x86)\\Graphviz2.38\\bin\\dot.exe"\n [linux = /usr/bin/dot] if "cannot find the file" error try: sudo pip install graphviz\n>>>') \
           or r"C:\Program Files (x86)\Graphviz2.36\bin\dot.exe"
#dot_file = r"C:\Program Files (x86)\Graphviz2.36\bin\dot.exe"

def checkURL():
    #Make sure it's malwr.com
    if varURL:
        if varURL[:27] == 'https://malwr.com/analysis/':
            return varURL
        else:
            error = 'URL "%s" does not look like this https://malwr.com/analysis/<hash>. Please try again.' % varURL
            return error
            sys.exit('')


#Configure proxies if you go through a proxy server to the Internet.
#proxies = {"http": "http://<IP of proxy>:80","https": "http://<IP of proxy>:80",}
proxies = {"": "","": "",}

try:
    print "Getting data from malwr.com..." 
    r = requests.get(varURL, verify=False, proxies=proxies)
except Exception,e:
    print 'Check URL: "%s". \nCheck proxy settings: %s"' % (varURL, proxies)
    sys.exit('')

results = []
try:
    soup = BeautifulSoup(r.text)
    for tag in soup.findAll(True,{'id':True}) :
        results.append(tag['id'])
except Exception,e:
    x = str(e)+str(varURL)
    print ('Failed at BeautifulSoup'+x)
    sys.exit('')

try:
        file_data       = soup.find("section", {"id": "file"})
        hosts           = soup.find("section", {"id": "hosts"})
        domains         = soup.find("section", {"id": "domains"})
        VirusTotalAlert = soup.find("section", {"id": "static_antivirus"})
        dropped         = soup.find("", {"id": "dropped"})
        Tags            = soup.find("", {"class": "alert alert-info"})
except Exception,e:
    x = str(e)+str(varURL)
    print ('Failed at sections'+x)

#tag
try:
        tag_file_data   = file_data.findAll('td')
        tag_hosts       = hosts.findAll('td')
        tag_domains     = domains.findAll('td')
        tag_VT          = VirusTotalAlert('td')
        tag_dropped_details     = dropped.findAll('td')
        tag_dropped     = dropped.findAll('b')
        Tags            = Tags.findAll('a')
except:
        print ('Failed at td ')


def __Tags():
    listTags = []
    for i in Tags[0:1]:
        listTags.append(str(i)[21:-4])
    if len(listTags) == 0:
        listTags = 0  #listTags = ['unknown']
    return listTags

def __File_Name():
        list_File = []
        for i in range(len(tag_file_data))[0:1]:
                list_File.append(str(tag_file_data[i].text))
        return list_File

def __Details():
        list_Details = []
        for i in range(len(tag_file_data))[1:6]:
                list_Details.append(str(tag_file_data[i].text))
        del list_Details[1]
        return list_Details
        #Example: ['size', 'md5', 'sha1', 'sha256']

def __VTquery():
    AVNameFinal=''
    positives = ''
    APT = 'False'
    Zeus = 'False'
    Adware = 'False'
    AutoIt = 'False'
    try:
        url = "https://www.virustotal.com/vtapi/v2/file/report"
        parameters = {"resource": __Details()[1], "apikey": VT_KEY}
        data = urllib.urlencode(parameters)
        req = urllib2.Request(url, data)
        response = urllib2.urlopen(req)
        json = response.read()
        response_dict = simplejson.loads(json)
        positives = response_dict.get("positives", {})

        listVirusNames = []
        for i in response_dict.get("scans", {}):
            listVirusNames.append(i)

        listAV_Names = []
        for i in listVirusNames:
            listAV_Names.append(response_dict.get("scans", {}).get(i, {}).get("result"))

        AVNameFinal=[]
        Taglist0 = ['Havex', 'havex']
        Taglist = ['zeus', 'Zeus', 'zbot','Zbot', 'Kryptik',\
                   'FAREIT', 'Tepfer', 'ZPACK'\
                   ,'FakeAV']
        Taglist2 = ['Adware']
        Taglist3 = ['Autoit', 'AutoIt']

        for i in listAV_Names:
            if i != None:
                for m in Taglist0:
                    if m in i:
                        APT = "True"
                for n in Taglist:
                    if n in i:
                        Zeus = "True"
                for o in Taglist2:
                    if o in i:
                        Adware = 'True'
                for p in Taglist3:
                    if p in i:
                        AutoIt = 'True'

                if i == 'Trj/CI.A': #Non descriptive enough word
                    AVNameFinal.append([len(i) + 5,i]) #Add 5 so it won't be shortest.
                else:
                    AVNameFinal.append([len(i),i])

    except:
        pass
    if APT == "True":
        MinName = "APT"
    elif Zeus == "True":
        MinName = "Zeus"
    elif AutoIt == "True":
        MinName = "AutoIt"
    elif Adware == "True":
        MinName = "Adware"
    elif AVNameFinal:
        MinName = str(min(AVNameFinal)[1])
    else:
        MinName = 0
    return positives, MinName

def __VT():
        #Return Number of AV alerts.
        list_VT = []
        for i in range(len(tag_VT)):
                list_VT.append(str(tag_VT[i].text))
        list_VT = zip(list_VT[::2],list_VT[1::2])
        list_VT_count = []
        for i in list_VT:
                if i[1] != "Clean":
                        list_VT_count.append(i)
        return len(list_VT_count)
        #Example: 5

def __Hosts():
    list_Hosts = []
    for i in tag_hosts:
        if str(i)[4:-5] not in list_Hosts:
            list_Hosts.append(str(i)[4:-5])

    gv_Hosts_nodes = ['subgraph cluster1 {label="Internet Traffic" color="red" fontname=Helvetica;']
    for i in list_Hosts:
        #To have IP addresses link to Robtex instead of VirusTotal.
        #gv_Hosts_nodes.append('"'+str(i)+'" [fontsize = "10", fontname=Helvetica, fillcolor="lightblue" style="filled, rounded", fontcolor="darkblue", URL="https://www.robtex.com/ip/'+str(i)+'.html#map"];')
        gv_Hosts_nodes.append('"'+str(i)+'" [fontsize = "10", fontname=Helvetica, fillcolor="lightblue" style="filled, rounded", fontcolor="darkblue", URL="https://www.virustotal.com/en/ip-address/'+str(i)+'/information/"];')

    gv_Hosts_edges = []
    for i in list_Hosts:
        gv_Hosts_edges.append('point1->"'+str(i)+'";')

    if gv_Hosts_edges:
            global last_point
            last_point = gv_Hosts_edges[8:-1]

    return gv_Hosts_nodes, gv_Hosts_edges

def __Domains():
    list_Domains = []
    for i in tag_domains:
                    list_Domains.append(str(i)[4:-5])

    if list_Domains:
            global last_point
            last_point = list_Domains[-1]

    gv_list_DomainsNodes = []
    for i in list_Domains:
        is_valid = re.match("^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$", i)
        if is_valid:
            gv_list_DomainsNodes.append('"'+i+'" [fontsize = "10", fontname=Helvetica, fillcolor="lightblue" style="filled, rounded", fontcolor="darkblue", URL="https://www.virustotal.com/en/ip-address/'+str(i)+'/information/"];')
        else:
            gv_list_DomainsNodes.append('"'+i+'" [fontsize = "10", fontname=Helvetica, fillcolor="lightblue" style="filled, rounded", fontcolor="darkblue", URL="https://www.virustotal.com/en/domain/'+str(i)+'/information/"];')
    gv_list_DomainsNodes.append('}')

    gv_list_DomainsEdges = []
    list_Domains = zip(list_Domains[::2],list_Domains[1::2])
    for i in list_Domains:
        gv_list_DomainsEdges.append('point1->"'+i[0]+'"->"'+i[1]+'";')

    return gv_list_DomainsNodes, gv_list_DomainsEdges

def __VTquery2(MD5hash):
    positives = ''
    try:
        url = "https://www.virustotal.com/vtapi/v2/file/report"
        parameters = {"resource": MD5hash, "apikey": VT_KEY}
        data = urllib.urlencode(parameters)
        req = urllib2.Request(url, data)
        response = urllib2.urlopen(req)
        json = response.read()
        response_dict = simplejson.loads(json)
        #global positives
        positives = response_dict.get("positives", {})

    except:
        print ("VirusTotal API key not used. No VT scan on dropped files. __VTquery2.")

    if isinstance(positives, int):
        if positives >= 1:
            positives = 'True' #VT = 1+
        elif positives == 0:
            positives = 'False' #VT = 0
    elif not positives:
        positives = 'empty' #VT = never seen it.
    else:
        positives = 'False' #If in doubt it's 0.
    return positives
    #if positives == 0:
    #if positives == 0: No VT hits.
    #if positives == {}: File not found.

def __Dropped():
    list_Dropped = []
    for i in tag_dropped:
        if str(i)[3:-4] not in list_Dropped:
            list_Dropped.append(str(i)[3:-4])

    list_matchMD5 = re.findall(r"<td>([a-fA-F\d]{32})\n</td>", str(tag_dropped_details))

    gv_exe_dll_zip_sys = []
    gv_dropped_NotExeFiles = []
    #list_Executables = [".exe", ".EXE", ".bin", ".dll", ".zip", ".sys", ".jar", ".scr", ".pif", ".rar", ".ocx", ".msi", ".apk", ".cpl", ".vbs", ".pip"]
    for i, n in zip(list_Dropped, list_matchMD5):
        if ".exe" in i[-4:]:
            VT_results = __VTquery2(n)
            if VT_results == 'True':
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=Helvetica, color="red", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
            elif VT_results == 'empty':
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=times, color="black", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
            else:
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=Courier, color="black", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')

        elif i[-4:] == ".EXE":
            VT_results = __VTquery2(n)
            if VT_results == 'True':
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=Helvetica, color="red", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
            elif VT_results == 'empty':
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=times, color="black", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
            else:
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=Courier, color="black", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
        elif i[-4:] == ".bin":
            VT_results = __VTquery2(n)
            if VT_results == 'True':
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=Helvetica, color="red", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
            elif VT_results == 'empty':
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=times, color="black", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
            else:
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=Courier, color="black", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
        elif i[-4:] == ".dll":
            VT_results = __VTquery2(n)
            if VT_results == 'True':
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=Helvetica, color="red", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
            elif VT_results == 'empty':
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=times, color="black", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
            else:
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=Courier, color="black", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
        elif i[-4:] == ".zip":
            VT_results = __VTquery2(n)
            if VT_results == 'True':
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=Helvetica, color="red", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
            elif VT_results == 'empty':
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=times, color="black", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
            else:
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=Courier, color="black", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
        elif i[-4:] == ".sys":
            VT_results = __VTquery2(n)
            if VT_results == 'True':
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=Helvetica, color="red", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
            elif VT_results == 'empty':
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=times, color="black", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
            else:
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=Courier, color="black", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
        elif i[-4:] == ".jar":
            VT_results = __VTquery2(n)
            if VT_results == 'True':
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=Helvetica, color="red", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
            elif VT_results == 'empty':
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=times, color="black", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
            else:
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=Courier, color="black", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
        elif i[-4:] == ".scr":
            VT_results = __VTquery2(n)
            if VT_results == 'True':
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=Helvetica, color="red", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
            elif VT_results == 'empty':
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=times, color="black", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
            else:
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=Courier, color="black", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
        elif i[-4:] == ".pif":
            VT_results = __VTquery2(n)
            if VT_results == 'True':
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=Helvetica, color="red", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
            elif VT_results == 'empty':
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=times, color="black", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
            else:
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=Courier, color="black", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
        elif i[-4:] == ".rar":
            VT_results = __VTquery2(n)
            if VT_results == 'True':
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=Helvetica, color="red", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
            elif VT_results == 'empty':
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=times, color="black", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
            else:
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=Courier, color="black", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
        elif i[-4:] == ".ocx":
            VT_results = __VTquery2(n)
            if VT_results == 'True':
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=Helvetica, color="red", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
            elif VT_results == 'empty':
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=times, color="black", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
            else:
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=Courier, color="black", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
        elif i[-4:] == ".msi":
            VT_results = __VTquery2(n)
            if VT_results == 'True':
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=Helvetica, color="red", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
            elif VT_results == 'empty':
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=times, color="black", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
            else:
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=Courier, color="black", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
        elif i[-4:] == ".apk":
            VT_results = __VTquery2(n)
            if VT_results == 'True':
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=Helvetica, color="red", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
            elif VT_results == 'empty':
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=times, color="black", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
            else:
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=Courier, color="black", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
        elif i[-4:] == ".cpl":
            VT_results = __VTquery2(n)
            if VT_results == 'True':
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=Helvetica, color="red", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
            elif VT_results == 'empty':
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=times, color="black", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
            else:
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=Courier, color="black", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
        elif i[-4:] == ".vbs":
            VT_results = __VTquery2(n)
            if VT_results == 'True':
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=Helvetica, color="red", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
            elif VT_results == 'empty':
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=times, color="black", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
            else:
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=Courier, color="black", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
        elif i[-4:] == ".pip":
            VT_results = __VTquery2(n)
            if VT_results == 'True':
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=Helvetica, color="red", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
            elif VT_results == 'empty':
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=times, color="black", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
            else:
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=Courier, color="black", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')

        elif i[-5:] == '.html':
            pass

        elif i[-4:-3] != '.':
            VT_results = __VTquery2(n)
            if VT_results == 'True':
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=Helvetica, color="red", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
            elif VT_results == 'empty':
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=times, color="black", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')
            else:
                gv_exe_dll_zip_sys.append('"'+str(i)+'" [fontsize = "10", fontname=Courier, color="black", penwidth=1, fillcolor="orange", style="filled", fontcolor="crimson", shape=box, URL="https://www.virustotal.com/latest-scan/'+n+'"];')

        else:
            gv_dropped_NotExeFiles.append(str(i))

    gv_dropped_last_node = ''
    if gv_dropped_NotExeFiles:
        gv_dropped_last_node = 'NotExeFiles [label = "%s", shape=record, fontsize = "10", fontname=Helvetica, fillcolor="orange" style="filled", fontcolor="crimson", URL="http://en.wikipedia.org/wiki/List_of_filename_extensions"];' % ("|".join(gv_dropped_NotExeFiles))

    #Create nodes inside subgraph cluster2.
    #Create edges outside subgraph cluster2
    gv_create_subgraph = []
    gv_Dropped_edges = []
    if gv_exe_dll_zip_sys:
        gv_create_subgraph.append('subgraph cluster2 {label="Created Files" color="darkorange" fontname=Helvetica;')
        for i in gv_exe_dll_zip_sys:
            gv_create_subgraph.append(str(i))
            gv_Dropped_edges.append('point2->'+str(i)+'')
        gv_create_subgraph.append(gv_dropped_last_node)
        gv_create_subgraph.append('}\n')

    # if no EXE files, but others.
    if gv_dropped_NotExeFiles:
        if not gv_exe_dll_zip_sys:
            global subgraph2a
            subgraph2a = 'subgraph cluster2 {label="Created Files" color="darkorange" fontname=Helvetica;'+gv_dropped_last_node+'}'

    if gv_dropped_NotExeFiles:
        gv_Dropped_edges.append('point2->NotExeFiles;')

    return gv_create_subgraph, gv_Dropped_edges


def __Build_gv():
    gv_head     = 'digraph "MalwareViz_%s Malware Visualizer" {rankdir = "LR"; ranksep=".08 equally";' % fileMD5 #<title>
    gv_node     = 'node [fontsize = "10", fontname=Helvetica];' #, shape=box, style=rounded
    gv_Start_color = "limegreen"
    if VTvalue != 0:
        gv_Start_color = "crimson"
    if HostDomaincount > 1:
        gv_Start_color = "crimson"
    gv_Start    = 'Start [label = "%s", shape="doublecircle", width=1.5, height=1.5, fillcolor="", color="%s", fontcolor="black", URL="%s"];' % (__File_Name()[0], gv_Start_color, varURL) # style="bold",
    VT_color    = "limegreen"
    if VTvalue != 0:
            VT_color = "red"
    gv_VT       = 'VirusTotal [label = "VirusTotal Alerts=%s", shape=box, style="filled, rounded", fillcolor="%s" fontcolor="black", URL="https://www.virustotal.com/latest-scan/%s"];' % (VTvalue, VT_color, fileMD5)
    #gv_rank     = 'rank = same {Start, VirusTotal};'
    gv_edges    = 'Start->VirusTotal [dir="none", penwidth=7];'
    #gv_Lang         = 'SUBLANG_NEUTRAL'

    #Build File
    f=open(static_dir+gvfilename, 'w')
    gv_total = gv_head, gv_node, gv_Start, gv_VT, gv_edges

    for i in gv_total:
        print >> f, i

    #Add empty points if hosts, domains, dropped is > 0
    #print >> f, 'node [label="", width=.1618, height=.1618, shape="none"];'
    points_count = []
    if len(tag_hosts) or len(tag_domains) > 0:
            points_count.append('point1 [label="", width=.01, height=.01, shape=circle, style="filled", fillcolor=black];')
            #points_count.append('point2 [label="", width=.01, height=.01, shape=circle, style="filled"];') #Creates space
            points_count.append('VirusTotal->point1 [dir="none"];')
            #points_count.append('rank = same {VirusTotal, point1, point2};')

    if "[<b>Sorry!</b>]" not in str(tag_dropped):
            points_count.append('point2 [label="", width=.01, height=.01, shape=circle, style="filled", fillcolor=black];')
            points_count.append('VirusTotal->point2 [dir="none"];')

    for i in points_count:
            print >> f, i

    #turn node shapes back on
    #print >> f, 'node [fontsize = "10", fontname=Helvetica, shape=box, style=rounded];'
    #subgraph1 Hosts, Domains
    for i in __Hosts()[0]:
        print >> f, i
    for i in __Domains()[0]:
        print >> f, i

    #edges
    for i in __Hosts()[1]:
        print >> f, i
    for i in __Domains()[1]:
        print >> f, i

    #subgraph2 Created_Files
    for i in __Dropped()[0]:
        print >> f, i

    try:
        if subgraph2a:
            print >> f, subgraph2a
    except:
        pass

    for i in __Dropped()[1]:
        print >> f, i

    #Close bracket
    print >> f, "}"
    f.close()
    return

def __addHyperLink(svgFile):
    with open(svgFile, 'rb') as editWidth:
            widthFile = editWidth.read()
    match = re.sub('<a xlink:href="', '<a xlink:show="new" xlink:href="', widthFile, count=0) #Count is num of occurance. 0=all

    with open(svgFile, 'wb') as editWidth:
            widthFile = editWidth.write(match)

def __dot(gv_file):
    svgFile = tempdir+fileMD5+'.svg'

    if os.path.isfile(r"C:\Program Files (x86)\Graphviz2.36\bin\dot.exe"):
        subprocess.call([dot_file, "-Tsvg", "-o", "%s" % svgFile, gv_file])
    elif os.path.isfile("/usr/bin/dot"):
        subprocess.call(["/usr/bin/dot", "-Tsvg", "-o", "%s" % svgFile, gv_file])
    else:
        print "Cannot find dot.exe, install http://www.graphviz.org/"
        sys.exit('')

    __addHyperLink(svgFile)
    webbrowser.open(svgFile, new=2)

r = 0 #Clean




if __name__ == '__main__':

    print "running...\n"
    checkURL()
    fileMD5     = __Details()[1]
    tempdir         = tempfile.gettempdir() + os.sep
    static_dir      = tempdir
    gvfilename      = fileMD5+'.gv'
    fullPathgvfile  = tempdir+gvfilename
    VTvalue = __VTquery()[0] or __VT() or 0                     #If VirusTotal from malwr or VirusTotal has a hire number use that.

    if __Tags():
        VTminName = __Tags()[0]                  #malwr.com Tag Name or Shortest Name in VT.
    elif __VTquery()[1]:
        VTminName = __VTquery()[1]
    else:
        VTminName = 'unknown'
    HostDomaincount =  len(tag_hosts) + (len(tag_domains)/2) #If VirusTotal is 0 but there are over 1 C2 then make red.
    __Build_gv()
    __dot(fullPathgvfile)
    print "Malware Name: " + VTminName



